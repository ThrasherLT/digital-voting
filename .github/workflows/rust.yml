name: Digital Voting CI

# TODO probably a good idea to specify specific toolchain versions in the future.

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    name: Build (only check for now)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true

    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}  
  
    # Not storing the artifacts yet, because the application is too bare bones for now.
    # And since we're not storing artifacts, we can just check instead of build.
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --verbose

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true

    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}  
  
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

  formatting:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true
  
    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-formatting-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  docrs:
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true

    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-docrs-${{ hashFiles('**/Cargo.lock') }}  

    - name: Build documentation
      uses: actions-rs/cargo@v1
      with:
        command: doc

  lint:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true
      
    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}  

    - name: Lint with Clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: -- -D warnings

  dependencies:
    name: Check dependencies
    runs-on: ubuntu-latest
    # Building udeps and deny takes way too long, so using a prebuilt image.
    container:
      image: thrasherlt/digital-voting-rust-multi-toolchain:latest

    steps:
    - uses: actions/checkout@v2

    # TODO not sure if two separate caches are required here:
    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-deny-${{ hashFiles('**/Cargo.lock') }}    
  
    - name: Check dependencies with cargo-deny
      run: cargo deny check

    - name: cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-udeps-${{ hashFiles('**/Cargo.lock') }}  
    
    - name: Check unused dependencies with cargo-udeps
      run: cargo +nightly udeps --all-targets
